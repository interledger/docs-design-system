---
interface Props {
  graph: string;
}

const { graph, hasBorder = false } = Astro.props;
---

{hasBorder ? <pre class="mermaid border" set:html={graph} /> : <pre class="mermaid" set:html={graph} />}

<style>
  pre.mermaid.mermaid {
    background-color: transparent;
    padding: 0;
    border-color: transparent;
  }

  pre.border {
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    border: 2px solid var(--color-accent-transparent);
  }
</style>

<script>
  import mermaid from "/node_modules/mermaid/dist/mermaid.esm.min.mjs";
  mermaid.initialize({ startOnLoad: false });

  const mermaidElements = document.querySelectorAll("pre.mermaid");

  function unescapeHTML(str) {
    return str
      .replaceAll("&gt;", ">")
      .replaceAll("&lt;", "<")
      .replaceAll("&amp;", "&");
  }

  async function drawDiagram(mermaidElement) {
    let graphDefinition = mermaidElement.innerHTML;
    graphDefinition = unescapeHTML(graphDefinition);
    const id = `graphDiv${Math.floor(Math.random() * 10000)}`;
    const { svg } = await mermaid.render(id, graphDefinition);
    mermaidElement.innerHTML = svg;
  }

  for (let mermaidElement of mermaidElements) {
    await drawDiagram(mermaidElement);
  }
</script>
